define("game",["ko","playableOptions","scoreboard","player"],function(a,b,c,d){return function(){this.getEndOfGameMessage=a.observable(""),this.scores=new c(this.getEndOfGameMessage),this.playableOptions=new b,this.playerOne=a.observable(new d("human")),this.playerTwo=a.observable(new d("robot")),this.playerOneChosenOption=a.observable(""),this.playerTwoChosenOption=a.observable(""),this.playing=a.observable(!1),this.showResultMessages=a.observable(!1),this.winner=a.observable(""),this.setPlayerOneHuman=function(){this.scores.resetScores(),this.playerOne(new d("human"))},this.setPlayerOneRobot=function(){this.scores.resetScores(),this.playerOne(new d("robot"))},this.setPlayerTwoHuman=function(){this.scores.resetScores(),this.playerTwo(new d("human"))},this.setPlayerTwoRobot=function(){this.scores.resetScores(),this.playerTwo(new d("robot"))},this.setPlayerOneSelection=function(a){this.playing()||(this.playerOneChosenOption(a),this.startHumanGame())},this.setPlayerTwoSelection=function(a){this.playing()||(this.playerTwoChosenOption(a),this.startHumanGame())},this.startHumanGame=function(){""===this.playerOneChosenOption()&&this.playerOne().isHuman()||""===this.playerTwoChosenOption()&&this.playerTwo().isHuman()||this.playGame()},this.getPlayerOneMessageClass=function(){var a=this.showResultMessages()?"visible ":"";switch(this.winner()){case"playerOneWins":return a+"win";case"playerTwoWins":return a+"lose";case"playersDraw":return a+"draw"}},this.getPlayerTwoMessageClass=function(){var a=this.showResultMessages()?"visible ":"";switch(this.winner()){case"playerTwoWins":return a+"win";case"playerOneWins":return a+"lose";case"playersDraw":return a+"draw"}},this.getPlayerOneMessageText=function(){switch(this.winner()){case"playerOneWins":return"Player 1 wins!";case"playerTwoWins":return"Player 1 loses";case"playersDraw":return"It's a draw!"}},this.getPlayerTwoMessageText=function(){switch(this.winner()){case"playerTwoWins":return"Player 2 wins!";case"playerOneWins":return"Player 2 loses";case"playersDraw":return"It's a draw!"}},this.getPlayGameButtonText=function(){return this.playing()?"Playing...":"Let them play!"},this.playGame=function(){this.playing()||(this.playing(!0),this.playerOne().isHuman()?this.playerOne().choose(this.playerOneChosenOption()):this.playerOne().choose(),this.playerTwo().isHuman()?this.playerTwo().choose(this.playerTwoChosenOption()):this.playerTwo().choose(),setTimeout(function(a){var b=a.playableOptions.decideResult(a.playerOne(),a.playerTwo());a.scores[b](),a.winner(b),a.showResultMessages(!0),setTimeout(function(a){a.playerOne().resetHand(),a.playerTwo().resetHand(),a.playerOneChosenOption(""),a.playerTwoChosenOption(""),a.playing(!1),a.showResultMessages(!1),a.winner("")},2e3,a)},1300,this))},this.dismissEndOfGameMessage=function(){this.getEndOfGameMessage("")}}}),define("playableOptions",["ko"],function(a){return function(){this.playableOptions=[{name:"Rock",powers:{beats:["Scissors"],draws:["Rock"],loses:["Paper"]}},{name:"Paper",powers:{beats:["Rock"],draws:["Paper"],loses:["Scissors"]}},{name:"Scissors",powers:{beats:["Paper"],draws:["Scissors"],loses:["Rock"]}}],this.getPlayableOptions=function(){return this.playableOptions},this.decideResult=function(a,b){for(var c=a.getChoice(),d=b.getChoice(),e="unknown decision",f=0,g=this.playableOptions.length;g>f;f++){var h=this.playableOptions[f];if(h.name===c)for(var i in h.powers)if(h.powers.hasOwnProperty(i)){power=h.powers[i];for(var j=0,k=power.length;k>j;j++)if(powerOption=power[j],powerOption==d)switch(i){case"beats":e="playerOneWins";break;case"draws":e="playersDraw";break;case"loses":e="playerTwoWins"}}}return e}}}),define("player",["ko","playableOptions"],function(a,b){return function(c){this.playerType=c,this.chosenOption=a.observable("neutral"),this.bounce=a.observable(""),this.playableOptions=new b,this.choose=function(a){this.bounce(" bounce"),setTimeout(function(b){if(b.isHuman())b.chosenOption(a);else{var c=Math.floor(Math.random()*b.playableOptions.getPlayableOptions().length);b.chosenOption(b.playableOptions.getPlayableOptions()[c].name)}},1e3,this)},this.getChoice=function(){return this.chosenOption()},this.getHandState=function(){return this.playerType+" hand "+this.chosenOption()+this.bounce()},this.resetHand=function(){this.chosenOption("neutral"),this.bounce("")},this.isHuman=function(){return"human"===this.playerType}}}),define("scoreboard",["ko"],function(a){return function(b){this.playerOneScore=a.observable(0),this.draws=a.observable(0),this.playerTwoScore=a.observable(0),this.digits=["zero","one","two","three","four","five","six","seven","eight","nine"],this.getPlayerOneScore=function(){return this.playerOneScore()>9?this.digits[9]:this.digits[this.playerOneScore()]},this.getDrawScore=function(){return this.draws()>9?this.digits[9]:this.digits[this.draws()]},this.getPlayerTwoScore=function(){return this.playerTwoScore()>9?this.digits[9]:this.digits[this.playerTwoScore()]},this.playerOneWins=function(){this.playerOneScore(this.playerOneScore()+1),this.checkForEndOfGame()},this.playersDraw=function(){this.draws(this.draws()+1),this.checkForEndOfGame()},this.playerTwoWins=function(){this.playerTwoScore(this.playerTwoScore()+1),this.checkForEndOfGame()},this.resetScores=function(){this.playerOneScore(0),this.draws(0),this.playerTwoScore(0)},this.checkForEndOfGame=function(){10==this.playerOneScore()&&(b("Player 1 wins the match!"),this.resetScores()),10==this.draws()&&(b("The match is declared a draw!"),this.resetScores()),10==this.playerTwoScore()&&(b("Player 2 wins the match!"),this.resetScores())}}}),requirejs.config({paths:{ko:"knockout.min"}}),require(["ko","game"],function(a,b){var c=new b;a.applyBindings(c)});